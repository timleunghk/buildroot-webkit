diff -urN 0/arch/arm/mach-bcm/pci-brcmstb.c 1/arch/arm/mach-bcm/pci-brcmstb.c
--- 0/arch/arm/mach-bcm/pci-brcmstb.c	2016-02-02 16:34:39.000000000 -0800
+++ 1/arch/arm/mach-bcm/pci-brcmstb.c	2016-04-27 15:10:17.087359940 -0700
@@ -321,9 +321,9 @@
 	__raw_writel(0x00000011, base + PCIE_MISC_RC_BAR2_CONFIG_LO);
 	__raw_writel(0x00000000, base + PCIE_MISC_RC_BAR2_CONFIG_HI);
 
-	/* field: SCB0_SIZE, default = 0xf (1 GB) */
+	/* field: SCB0_SIZE = 2 Gb (the latter 1GB is a memory hole */
 	scb_size_val = pcie->scb_size_vals[0] ? pcie->scb_size_vals[0] : 0xf;
-	wr_fld(base + PCIE_MISC_MISC_CTRL, 0xf8000000, 27, scb_size_val);
+	wr_fld(base + PCIE_MISC_MISC_CTRL, 0xf8000000, 27, 0x10);
 
 	/* field: SCB1_SIZE, default = 0xf (1 GB) */
 	if (num_memc > 1) {
diff -urN 0/drivers/ata/sata_brcmstb.c 1/drivers/ata/sata_brcmstb.c
--- 0/drivers/ata/sata_brcmstb.c	2016-02-02 16:34:40.000000000 -0800
+++ 1/drivers/ata/sata_brcmstb.c	2016-04-27 15:10:17.087359940 -0700
@@ -299,6 +299,8 @@
 	int status = 0;
 	struct sata_brcm_pdata *brcm_pdata = pdev->dev.platform_data;
 	struct device_node *of_node = pdev->dev.of_node;
+	struct property *prop;
+	char *propname;
 
 	/* MANDATORY */
 	status = brcm_ahci_parse_dt_prop_u32(of_node, "phy-generation",
@@ -324,6 +326,25 @@
 	if (status)
 		brcm_pdata->phy_enable_ssc_mask = 0;
 
+    /* ARRIS force ssc until dtb add parameter */
+    brcm_pdata->phy_enable_ssc_mask = 1;
+
+	/* OPTIONAL */
+	propname = "phy-force-spd";
+	prop = of_find_property(of_node, propname, NULL);
+	if (prop) {
+		if ((prop->length % 8) == 0) {
+			int num_entries = prop->length / sizeof(u32) / 2;
+			const __be32 *ptr = prop->value;
+			while (num_entries-- != 0) {
+				const u32 port = be32_to_cpup(ptr++);
+				const u32 val = be32_to_cpup(ptr++);
+				brcm_sata3_phy_spd_set(brcm_pdata, port, val);
+			}
+		} else
+			pr_err("%s property is malformed!\n", propname);
+	}
+
 err:
 	return status;
 }
diff -urN 0/drivers/ata/sata_brcmstb.h 1/drivers/ata/sata_brcmstb.h
--- 0/drivers/ata/sata_brcmstb.h	2016-02-02 16:34:40.000000000 -0800
+++ 1/drivers/ata/sata_brcmstb.h	2016-04-27 15:10:17.091360101 -0700
@@ -40,6 +40,12 @@
  * rather than having a separate map per port. */
 #define SATA_MDIO_REG_LEGACY_BANK_OFS	0x10
 
+#define SPD_SETTING_WIDTH		4
+#define SPD_SETTING_PER_U32		(32 / SPD_SETTING_WIDTH)
+#define SPD_SETTING_MASK		0xf
+#define SPD_SETTING_SHIFT(port)		\
+	(((port) % SPD_SETTING_PER_U32) * SPD_SETTING_WIDTH)
+
 #define MAX_PHY_CTRL_PORTS			2
 #define SATA_TOP_CTRL_REG_LENGTH		0x24
 #define SATA_TOP_CTRL_BUS_CTRL			0x4
@@ -72,6 +78,11 @@
 	TXPMD_TX_FREQ_CTRL_CONTROL2_FMIN_MASK = 0x3ff,
 	TXPMD_TX_FREQ_CTRL_CONTROL3 = 0x84,
 	TXPMD_TX_FREQ_CTRL_CONTROL3_FMAX_MASK = 0x3ff,
+	TX_BANK_0 = 0x70,
+	TX_PREEMP = 0x82,
+	TX_AMP = 0x81,
+	TX_PREAMP_MASK = 0xFFFFF03B,
+	TX_AMP_MASK = 0xFFFFC0FF,
 };
 
 enum sata_mdio_phy_regs_legacy {
@@ -103,6 +114,7 @@
 	u32 phy_generation;
 	u32 phy_base_addr;
 	u32 phy_enable_ssc_mask;
+	u32 phy_force_spd[MAX_PORTS / SPD_SETTING_PER_U32];
 	u32 top_ctrl_base_addr;
 	u32 quirks;
 	struct clk *sata_clk;
@@ -110,6 +122,7 @@
 
 struct sata_phy_cfg_ops {
 	void (*cfg_ssc)(void __iomem *base, int port, int ssc_en);
+	void (*cfg_tx)(void __iomem *base, int port);
 };
 
 enum sata_phy_mdio_gen {
@@ -118,6 +131,8 @@
 	SATA_PHY_MDIO_END,
 };
 
+int brcm_sata3_phy_spd_get(const struct sata_brcm_pdata *pdata, int port);
+void brcm_sata3_phy_spd_set(struct sata_brcm_pdata *pdata, int port, int val);
 void brcm_sata3_phy_cfg(const struct sata_brcm_pdata *pdata, int port,
 			int enable);
 
diff -urN 0/drivers/ata/sata_brcmstb_phy.c 1/drivers/ata/sata_brcmstb_phy.c
--- 0/drivers/ata/sata_brcmstb_phy.c	2016-02-02 16:34:40.000000000 -0800
+++ 1/drivers/ata/sata_brcmstb_phy.c	2016-04-27 15:10:17.091360101 -0700
@@ -68,6 +68,13 @@
 #define FMAX_VAL_DEFAULT 0x3df
 #define FMAX_VAL_SSC 0x83
 
+static void cfg_tx_amp_preamp(void __iomem *base, int port)
+{
+	sata_mdio_wr_28nm(base, port, TX_BANK_0, TX_PREEMP, TX_PREAMP_MASK, 0x118C);
+
+	sata_mdio_wr_28nm(base, port, TX_BANK_0, TX_AMP, TX_AMP_MASK, 0xC00);
+}
+
 static void cfg_ssc_28nm(void __iomem *base, int port, int ssc_en)
 {
 	u32 tmp;
@@ -125,14 +132,37 @@
 static struct sata_phy_cfg_ops cfg_op_tbl[SATA_PHY_MDIO_END] = {
 	[SATA_PHY_MDIO_LEGACY] = {
 		.cfg_ssc = cfg_ssc_legacy,
+		.cfg_tx = NULL,
 	},
 	[SATA_PHY_MDIO_28NM] = {
 		.cfg_ssc = cfg_ssc_28nm,
+		.cfg_tx = cfg_tx_amp_preamp,
 	},
 };
 
 static struct sata_phy_cfg_ops *cfg_op;
 
+int brcm_sata3_phy_spd_get(const struct sata_brcm_pdata *pdata, int port)
+{
+	int val = (pdata->phy_force_spd[port / SPD_SETTING_PER_U32]
+		   >> SPD_SETTING_SHIFT(port));
+
+	return val & SPD_SETTING_MASK;
+}
+EXPORT_SYMBOL(brcm_sata3_phy_spd_get);
+
+void brcm_sata3_phy_spd_set(struct sata_brcm_pdata *pdata, int port, int val)
+{
+	int tmp = pdata->phy_force_spd[port / SPD_SETTING_PER_U32];
+
+	pr_debug("Forcing port %d to gen %d speed\n", port, val);
+
+	tmp &= ~(SPD_SETTING_MASK << SPD_SETTING_SHIFT(port));
+	tmp |= (val & SPD_SETTING_MASK) << SPD_SETTING_SHIFT(port);
+	pdata->phy_force_spd[port / SPD_SETTING_WIDTH] = tmp;
+}
+EXPORT_SYMBOL(brcm_sata3_phy_spd_set);
+
 static void _brcm_sata3_phy_cfg(const struct sata_brcm_pdata *pdata, int port,
 			       int enable)
 {
@@ -227,6 +257,8 @@
 		_brcm_sata3_phy_cfg(pdata, port, 1);
 		if (cfg_op->cfg_ssc)
 			cfg_op->cfg_ssc(base, port, ssc_enable);
+		if (cfg_op->cfg_tx)
+			cfg_op->cfg_tx(base, port);
 	} else
 		_brcm_sata3_phy_cfg(pdata, port, 0);
 
diff -urN 0/drivers/mtd/nand/brcmstb_nand.c 1/drivers/mtd/nand/brcmstb_nand.c
--- 0/drivers/mtd/nand/brcmstb_nand.c	2016-02-02 16:34:41.000000000 -0800
+++ 1/drivers/mtd/nand/brcmstb_nand.c	2016-04-27 15:10:17.091360101 -0700
@@ -515,6 +515,13 @@
 
 static void brcmstb_nand_wp(struct mtd_info *mtd, int wp)
 {
+	struct nand_chip *chip = mtd->priv;
+	int mfr_id;
+        /* If Mfr id comes up as AMD, skip the reset */
+        chip->cmdfunc(mtd, NAND_CMD_READID, 0x00, -1);
+        mfr_id = chip->read_byte(mtd);
+        if(!((NAND_MFR_AMD == mfr_id)||(NAND_MFR_WINBOND == mfr_id)))
+        {
 #ifdef BCHP_NAND_CS_NAND_SELECT_NAND_WP_MASK
 	if (wp_on == 1) {
 		static int old_wp = -1;
@@ -525,6 +532,7 @@
 		BDEV_WR_F_RB(NAND_CS_NAND_SELECT, NAND_WP, wp);
 	}
 #endif
+	}
 }
 
 /* Helper functions for reading and writing OOB registers */
@@ -960,6 +968,47 @@
 				"timeout waiting for DMA; status %#x, error status %#x\n",
 				flash_dma_readl(ctrl, FLASH_DMA_STATUS),
 				flash_dma_readl(ctrl, FLASH_DMA_ERROR_STATUS));
+		/* Dumping NAND & FLASH_DMA */
+		{
+			unsigned int i = 0; unsigned int nandbase = 0;
+			dev_err(&host->pdev->dev, "FIRST_DESC: %x, FIRST_DESC_EXT: %x\n",
+			flash_dma_readl(ctrl, FLASH_DMA_FIRST_DESC),
+			flash_dma_readl(ctrl, FLASH_DMA_FIRST_DESC_EXT));
+            dev_err(&host->pdev->dev, "CURRENT_DESC: %x, CURRENT_DESC_EXT: %x\n",
+            flash_dma_readl(ctrl, FLASH_DMA_CURRENT_DESC),
+            flash_dma_readl(ctrl, FLASH_DMA_CURRENT_DESC_EXT));
+            dev_err(&host->pdev->dev, "INTERRUPT_DESC: %x, INTERRUPT_DESC_EXT: %x\n",
+            flash_dma_readl(ctrl, FLASH_DMA_INTERRUPT_DESC),
+            flash_dma_readl(ctrl, FLASH_DMA_INTERRUPT_DESC_EXT));
+            dev_err(&host->pdev->dev, "CTRL: %x, MODE: %x\n",
+            flash_dma_readl(ctrl, FLASH_DMA_CTRL),
+            flash_dma_readl(ctrl, FLASH_DMA_MODE));
+			dev_err(&host->pdev->dev, "DUMPING NAND\n");
+			for(i = 0; i < 11 ;i++)
+			{
+				dev_err(&host->pdev->dev, "Addr %x Data %x\n",
+					(BCHP_NAND_REVISION + 4*i),
+					BDEV_RD(BCHP_NAND_REVISION + 4*i));
+			}
+			for(i = 0; i < 41 ;i++)
+			{
+				dev_err(&host->pdev->dev, "Addr %x Data %x\n",
+					(BCHP_NAND_ACC_CONTROL_CS0 + 4*i),
+					BDEV_RD(BCHP_NAND_ACC_CONTROL_CS0 + 4*i));
+			}
+			for(i = 0; i < 22 ;i++)
+			{
+				dev_err(&host->pdev->dev, "Addr %x Data %x\n",
+					(BCHP_NAND_UNCORR_ERROR_COUNT + 4*i),
+					BDEV_RD(BCHP_NAND_UNCORR_ERROR_COUNT + 4*i));
+			}
+			for(i = 0; i < 59 ;i++)
+			{
+				dev_err(&host->pdev->dev, "Addr %x Data %x\n",
+					(BCHP_NAND_SPARE_AREA_READ_OFS_0 + 4*i),
+					BDEV_RD(BCHP_NAND_SPARE_AREA_READ_OFS_0 + 4*i));
+			}
+		}
 	}
 	ctrl->dma_pending = false;
 	flash_dma_writel(ctrl, FLASH_DMA_CTRL, 0); /* force stop */
@@ -1736,6 +1785,7 @@
 {
 	struct brcmstb_nand_controller *ctrl = dev_get_drvdata(dev);
 	struct brcmstb_nand_host *host;
+	int mfr_id;
 
 	dev_dbg(dev, "Restore state after S3 suspend\n");
 
@@ -1768,8 +1818,14 @@
 		BDEV_WR_RB(REG_TIMING_1(host->cs), host->hwcfg.timing_1);
 		BDEV_WR_RB(REG_TIMING_2(host->cs), host->hwcfg.timing_2);
 
-		/* Reset the chip, required by some chips after power-up */
-		chip->cmdfunc(mtd, NAND_CMD_RESET, -1, -1);
+	        /* If Mfr id comes up as AMD, skip the reset */
+	        chip->cmdfunc(mtd, NAND_CMD_READID, 0x00, -1);
+	        mfr_id = chip->read_byte(mtd);
+	        if(!((NAND_MFR_AMD == mfr_id)||(NAND_MFR_WINBOND == mfr_id)))
+	        {
+			/* Reset the chip, required by some chips after power-up */
+			chip->cmdfunc(mtd, NAND_CMD_RESET, -1, -1);
+		}
 	}
 
 	return 0;
diff -urN 0/drivers/mtd/nand/nand_base.c 1/drivers/mtd/nand/nand_base.c
--- 0/drivers/mtd/nand/nand_base.c	2016-02-02 16:34:41.000000000 -0800
+++ 1/drivers/mtd/nand/nand_base.c	2016-04-27 15:10:17.095360263 -0700
@@ -2523,6 +2523,7 @@
 {
 	int chipnr, page, status, len;
 	struct nand_chip *chip = mtd->priv;
+	int mfr_id;
 
 	pr_debug("%s: to = 0x%08x, len = %i\n",
 			 __func__, (unsigned int)to, (int)ops->ooblen);
@@ -2561,6 +2562,11 @@
 	/* Shift to get page */
 	page = (int)(to >> chip->page_shift);
 
+        /* If Mfr id comes up as AMD, skip the reset */
+        chip->cmdfunc(mtd, NAND_CMD_READID, 0x00, -1);
+        mfr_id = chip->read_byte(mtd);
+        if(!((NAND_MFR_AMD == mfr_id)||(NAND_MFR_WINBOND == mfr_id)))
+        {
 	/*
 	 * Reset the chip. Some chips (like the Toshiba TC5832DC found in one
 	 * of my DiskOnChip 2000 test units) will clear the whole data page too
@@ -2568,6 +2574,7 @@
 	 * it in the doc2000 driver in August 1999.  dwmw2.
 	 */
 	chip->cmdfunc(mtd, NAND_CMD_RESET, -1, -1);
+	}
 
 	/* Check, if it is write protected */
 	if (nand_check_wp(mtd)) {
@@ -3505,15 +3512,22 @@
 {
 	int i, maf_idx;
 	u8 id_data[8];
+	int mfr_id;
 
 	/* Select the device */
 	chip->select_chip(mtd, 0);
 
-	/*
-	 * Reset the chip, required by some chips (e.g. Micron MT29FxGxxxxx)
-	 * after power-up.
-	 */
-	chip->cmdfunc(mtd, NAND_CMD_RESET, -1, -1);
+	/* If Mfr id comes up as AMD, skip the reset */
+	chip->cmdfunc(mtd, NAND_CMD_READID, 0x00, -1);
+	mfr_id = chip->read_byte(mtd);
+	if(!((NAND_MFR_AMD == mfr_id)||(NAND_MFR_WINBOND == mfr_id)))
+	{
+		/*
+		 * Reset the chip, required by some chips (e.g. Micron MT29FxGxxxxx)
+		 * after power-up.
+		 */
+		chip->cmdfunc(mtd, NAND_CMD_RESET, -1, -1);
+	}
 
 	/* Send the command for reading device ID */
 	chip->cmdfunc(mtd, NAND_CMD_READID, 0x00, -1);
@@ -3662,6 +3676,7 @@
 	int i, busw, nand_maf_id, nand_dev_id;
 	struct nand_chip *chip = mtd->priv;
 	struct nand_flash_dev *type;
+	int mfr_id;
 
 	/* Get buswidth to select the correct functions */
 	busw = chip->options & NAND_BUSWIDTH_16;
@@ -3685,7 +3700,12 @@
 	for (i = 1; i < maxchips; i++) {
 		chip->select_chip(mtd, i);
 		/* See comment in nand_get_flash_type for reset */
-		chip->cmdfunc(mtd, NAND_CMD_RESET, -1, -1);
+	        chip->cmdfunc(mtd, NAND_CMD_READID, 0x00, -1);
+	        mfr_id = chip->read_byte(mtd);
+	        if(!((NAND_MFR_AMD == mfr_id)||(NAND_MFR_WINBOND == mfr_id)))
+	        {
+			chip->cmdfunc(mtd, NAND_CMD_RESET, -1, -1);
+		}
 		/* Send the command for reading device ID */
 		chip->cmdfunc(mtd, NAND_CMD_READID, 0x00, -1);
 		/* Read manufacturer and device IDs */
diff -urN 0/drivers/mtd/nand/nand_ids.c 1/drivers/mtd/nand/nand_ids.c
--- 0/drivers/mtd/nand/nand_ids.c	2016-02-02 16:34:41.000000000 -0800
+++ 1/drivers/mtd/nand/nand_ids.c	2016-04-27 15:10:17.095360263 -0700
@@ -171,6 +171,7 @@
 	{NAND_MFR_EON, "Eon"},
 	{NAND_MFR_SANDISK, "SanDisk"},
 	{NAND_MFR_INTEL, "Intel"},
+	{NAND_MFR_WINBOND, "Winbond"},
 	{0x0, "Unknown"}
 };
 
diff -urN 0/include/linux/mtd/nand.h 1/include/linux/mtd/nand.h
--- 0/include/linux/mtd/nand.h	2016-02-02 16:34:43.000000000 -0800
+++ 1/include/linux/mtd/nand.h	2016-04-27 15:10:17.095360263 -0700
@@ -640,6 +640,7 @@
 #define NAND_MFR_EON		0x92
 #define NAND_MFR_SANDISK	0x45
 #define NAND_MFR_INTEL		0x89
+#define NAND_MFR_WINBOND	0xef
 
 /* The maximum expected count of bytes in the NAND ID sequence */
 #define NAND_MAX_ID_LEN 8
diff -aurNd linux.org/scripts/Makefile.build linux/scripts/Makefile.build
--- linux.org/scripts/Makefile.build	2015-08-26 10:41:52.758755435 -0400
+++ linux/scripts/Makefile.build	2015-08-26 10:57:48.797612035 -0400
@@ -428,7 +428,7 @@
 $($(subst $(obj)/,,$(@:.o=-y)))), $^)
  
 quiet_cmd_link_multi-y = LD      $@
-cmd_link_multi-y = $(LD) $(ld_flags) -r -o $@ $(link_multi_deps) $(cmd_secanalysis)
+cmd_link_multi-y = $(LD) $(ld_flags) -r -o $@ @$@.list $(cmd_secanalysis)
 
 quiet_cmd_link_multi-m = LD [M]  $@
 cmd_link_multi-m = $(cmd_link_multi-y)
@@ -438,11 +438,15 @@
 # but that's not so easy, so we rather make all composite objects depend
 # on the set of all their parts
 $(multi-used-y) : %.o: $(multi-objs-y) FORCE
+	@echo "$(link_multi_deps)" > $@.list
 	$(call if_changed,link_multi-y)
+	@rm -rf $@.list
 
 $(multi-used-m) : %.o: $(multi-objs-m) FORCE
+	@echo "$(link_multi_deps)" > $@.list
 	$(call if_changed,link_multi-m)
 	@{ echo $(@:.o=.ko); echo $(link_multi_deps); } > $(MODVERDIR)/$(@F:.o=.mod)
+	@rm -rf $@.list
 
 targets += $(multi-used-y) $(multi-used-m)
 
 diff -aurNd linux.orig/drivers/net/ethernet/broadcom/bcmsysport.c linux/drivers/net/ethernet/broadcom/bcmsysport.c
--- linux.orig/drivers/net/ethernet/broadcom/bcmsysport.c	2015-01-30 14:35:10.000000000 -0500
+++ linux/drivers/net/ethernet/broadcom/bcmsysport.c	2015-02-11 09:54:05.217202104 -0500
@@ -1665,6 +1665,9 @@
 	if (!dev)
 		return -ENOMEM;
 
+	/* Force the name of systemport from eth%d to sysport */
+	strcpy(dev->name, "sysport");
+
 	/* Initialize private members */
 	priv = netdev_priv(dev);
 
diff -aurNd linux.orig/drivers/net/ethernet/broadcom/genet/bcmgenet.c linux/drivers/net/ethernet/broadcom/genet/bcmgenet.c
--- linux.orig/drivers/net/ethernet/broadcom/genet/bcmgenet.c	2015-01-30 14:35:10.000000000 -0500
+++ linux/drivers/net/ethernet/broadcom/genet/bcmgenet.c	2015-02-11 09:54:22.585651770 -0500
@@ -2815,6 +2815,14 @@
 
 	bcmgenet_of_parse(dn, priv);
 
+	/* Force DOCSIS interface name to "eth0" */
+	if (priv->phy_type == BRCM_PHY_TYPE_EXT_RGMII)
+		strcpy(dev->name, "eth0");
+
+	/* Force MoCA interface name to "eth1" */
+	if (priv->phy_type == BRCM_PHY_TYPE_MOCA)
+		strcpy(dev->name, "eth1");
+
 	priv->clk_wol = devm_clk_get(&priv->pdev->dev, "sw_genetwol");
 	if (IS_ERR(priv->clk_wol)) {
 		dev_warn(&priv->pdev->dev, "failed to get enet-wol clock\n");
diff -aurNd linux.orig/net/core/dev.c linux/net/core/dev.c
--- linux.orig/net/core/dev.c	2015-01-30 14:35:12.000000000 -0500
+++ linux/net/core/dev.c	2015-02-11 09:57:23.406332683 -0500
@@ -986,6 +986,10 @@
 		if (!inuse)
 			return -ENOMEM;
 
+		/* Reserve eth0 for DOCSIS and eth1 for MoCA */
+		set_bit(0, inuse);
+		set_bit(1, inuse);
+
 		for_each_netdev(net, d) {
 			if (!sscanf(d->name, name, &i))
 				continue;
diff -aurNd linux.orig/net/dsa/dsa.c linux/net/dsa/dsa.c
--- linux.orig/net/dsa/dsa.c	2015-01-30 14:35:12.000000000 -0500
+++ linux/net/dsa/dsa.c	2015-02-11 09:57:33.062582629 -0500
@@ -473,7 +473,23 @@
 
 			port_index = be32_to_cpup(port_reg);
 
-			port_name = of_get_property(port, "label", NULL);
+			/* Force MoCA interface name to "eth1" */
+			{
+				const char *port_phymode;
+				static int force_docsis=1, force_moca=1;
+
+				port_phymode = of_get_property(port, "phy-mode", NULL);
+				if (force_docsis && port_phymode && !strcmp(port_phymode, "rgmii-txid")) {
+					port_name = "eth0";
+					force_docsis = 0;
+				} else if (force_moca && port_phymode && !strcmp(port_phymode, "moca")) {
+					port_name = "eth1";
+					force_moca = 0;
+				} else {
+					port_name = of_get_property(port, "label", NULL);
+				}
+			}
+
 			if (!port_name)
 				continue;
 
From 6917a7fac7b1c47e5343e4c4b5c92f2d2faa1808 Mon Sep 17 00:00:00 2001
From: Andre McCurdy <armccurdy@gmail.com>
Date: Wed, 7 Oct 2015 22:33:13 -0700
Subject: [PATCH] bcmgenet.h: remove __DATE__ and __TIME__ macros

The kernel enables -Werror=date-time if the compiler is new enough
to support it (4.9.x and above ?), so remove __DATE__ and __TIME__
macros from kernel sources to avoid build failures with recent
versions of gcc.

Signed-off-by: Andre McCurdy <armccurdy@gmail.com>
---
 drivers/net/ethernet/broadcom/genet/bcmgenet.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/net/ethernet/broadcom/genet/bcmgenet.h b/drivers/net/ethernet/broadcom/genet/bcmgenet.h
index 13d1ca6..6e5ab94 100644
--- a/drivers/net/ethernet/broadcom/genet/bcmgenet.h
+++ b/drivers/net/ethernet/broadcom/genet/bcmgenet.h
@@ -21,7 +21,7 @@
 #define __BCMGENET_H__
 
 #define VERSION     "2.0"
-#define VER_STR     "v" VERSION " " __DATE__ " " __TIME__
+#define VER_STR     "v" VERSION
 
 #include <linux/skbuff.h>
 #include <linux/netdevice.h>
-- 
1.9.1
