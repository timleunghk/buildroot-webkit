diff -Naur kernel.old/drivers/systool/Kconfig kernel.new/drivers/systool/Kconfig
--- kernel.old/drivers/systool/Kconfig	1970-01-01 01:00:00.000000000 +0100
+++ kernel.new/drivers/systool/Kconfig	2016-01-26 18:23:10.646836841 +0100
@@ -0,0 +1,7 @@
+#
+# systool subsystem configuration
+# SYSTOOL is a system information managment API
+#
+config SYSTOOL_SUPPORT
+ bool "Systool driver"
+
diff -Naur kernel.old/drivers/systool/Makefile kernel.new/drivers/systool/Makefile
--- kernel.old/drivers/systool/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ kernel.new/drivers/systool/Makefile	2016-01-26 18:23:10.634836716 +0100
@@ -0,0 +1 @@
+obj-$(CONFIG_SYSTOOL_SUPPORT)        +=systool.o

diff -Naur kernel.old/drivers/Kconfig kernel.new/drivers/Kconfig
--- kernel.old/drivers/Kconfig	2016-01-26 18:21:46.790010483 +0100
+++ kernel.new/drivers/Kconfig	2016-01-26 18:47:25.114103188 +0100
@@ -174,4 +174,6 @@
 
 source "drivers/powercap/Kconfig"
 
+source "drivers/systool/Kconfig"
+
 endmenu
diff -Naur kernel.old/drivers/Makefile kernel.new/drivers/Makefile
--- kernel.old/drivers/Makefile	2016-01-26 18:21:46.778010365 +0100
+++ kernel.new/drivers/Makefile	2016-01-26 20:24:12.317367633 +0100
@@ -159,3 +159,5 @@
 obj-$(CONFIG_NTB)		+= ntb/
 obj-$(CONFIG_FMC)		+= fmc/
 obj-$(CONFIG_POWERCAP)		+= powercap/
+
+obj-$(CONFIG_SYSTOOL_SUPPORT)   += systool/
diff -Naur kernel.old/drivers/systool/systool.c kernel.new/drivers/systool/systool.c
--- kernel.old/drivers/systool/systool.c	1970-01-01 01:00:00.000000000 +0100
+++ kernel.new/drivers/systool/systool.c	2016-01-26 20:24:47.148735456 +0100
@@ -0,0 +1,250 @@
+/*
+ *  systool.c
+ *
+ *  This file contains the implementation of the AON read/writer
+ *  interface module with the user space.
+ *
+ *  Created by Samir MOUHOUNE on 10/07/2013.
+ *  Copyright 2013 Pace plc. All rights reserved.
+ *
+ *  The copyright in this material is owned by Pace
+ *  plc ("Pace"). This material is regarded as a
+ *  highly confidential trade secret of Pace. It may not be
+ *  reproduced, used, sold or in any other way exploited or
+ *  transferred to any third party without the prior
+ *  written permission of Pace.
+ *
+ */
+
+
+#include <linux/module.h>
+#include <linux/fs.h>
+#include <linux/kernel_stat.h>
+#include <linux/tick.h>
+#include <linux/brcmstb/brcmstb.h>
+#include <linux/string.h>
+
+#include <linux/systool.h>
+#include "systool_priv.h"
+
+#include <linux/reboot.h>
+#include <linux/slab.h>
+#include <linux/suspend.h>
+
+MODULE_AUTHOR ("Pace");
+MODULE_DESCRIPTION ("System Information Management interface");
+MODULE_SUPPORTED_DEVICE ("");
+MODULE_LICENSE ("Pace Proprietary");
+
+
+/*
+ *
+ *  Module param
+ *
+ */
+static int systool_major = 0;/*Major Number will be set dynamically*/
+
+module_param (systool_major,  int, 0644);
+MODULE_PARM_DESC (systool_major,  "Device major number");
+
+
+static struct systool sys_info;
+
+
+int system_reboot(void)
+{
+
+    machine_restart("reboot");
+
+    return 0;
+}
+
+
+
+/***********************************************************************************************
+ *
+ *  Char device functions
+ *
+ ***********************************************************************************************/
+
+/*
+ *
+ *  systool_open
+ *
+ */
+static int systool_open(struct inode *inode, struct file *filp)
+{
+    logsystool("An instance of %s has been opened.\n", systool_NAME);
+    return 0;
+}
+
+
+/*
+ *
+ *  systool_close
+ *
+ */
+static int systool_close(struct inode *inode, struct file *file)
+{
+    logsystool("One instance of %s has been closed.\n", systool_NAME);
+    return 0;
+}
+
+
+/*
+ *
+ *  systool_ioctl
+ *
+ */
+long systool_ioctl(struct file *filp,unsigned int cmd, unsigned long arg)
+{
+    if (_IOC_TYPE(cmd) != systool_IOC_MAGIC)
+    {
+        logsystool("Unrecognized ioctl command prefix.\n");
+        return 1;
+    }
+    if (_IOC_NR(cmd) > MAX_IOCTL_CMD_NMBR)
+    {
+        logsystool("ioctl command number out of range.\n");
+        return 1;
+    }
+    switch (cmd)
+    {
+        case GET_MEMORY_STATUS:
+            logsystool("ioctl cmd = GET_MEMORY_STATUS.\n");
+            
+            break;
+      case GET_PROCESS_STATUS:
+            logsystool("ioctl cmd =  GET_PROCESS_STATUS.\n");
+            
+            break;
+      case GET_PROCESSOR:
+            logsystool("ioctl cmd =  GET_PROCESSOR.\n");
+            
+            break;
+      case GET_NB_PROC:
+            logsystool("ioctl cmd =  GET_NB_PROC.\n");
+            
+            break;
+      case GET_NB_CPU:
+            logsystool("ioctl cmd =  GET_NB_CPU.\n");
+            
+            break;
+      case CPU_REBOOT_CMD:
+            
+            system_reboot();
+            break;
+      case STANDBY_CM_ENABLE:
+            logsystool("ioctl cmd =  STANDBY_CM_ENABLE.\n");
+            
+            break;
+      case STANDBY_CM_DISABLE:
+            logsystool("ioctl cmd =  STANDBY_CM_DISABLE.\n");
+            
+            break;
+      default:
+            logsystool("ioctl cmd = default.\n");
+            return 1;
+    }
+    return 0;
+}
+
+
+/*
+ *
+ *  systool_read
+ *
+ */
+static ssize_t systool_read(struct file *file, char *buff, size_t ctr, loff_t *offp)
+{
+   /*TODO  to be implemented*/
+    return 0;
+}
+
+
+/***********************************************************************************************
+ *
+ *  Functions uses to write in the device buffer
+ *
+ ***********************************************************************************************/
+
+/*
+ *
+ *  _systool_write
+ *
+ *
+ *
+ */
+static ssize_t systool_write(struct file *file, const char *buff, size_t ctr,loff_t *woof)
+{
+/*TODO to be implemnted*/
+    return 0;
+}
+
+
+struct file_operations systool_fops = {
+    owner: THIS_MODULE,
+    open: systool_open,
+    release: systool_close,
+    read: systool_read,
+    write: systool_write,
+    unlocked_ioctl: systool_ioctl,
+};
+
+
+
+/***********************************************************************************************
+ *
+ *  init and exit functions
+ *
+ ***********************************************************************************************/
+
+/*
+ *
+ *  systool_init
+ *
+ */
+static int __init systool_init(void)
+{
+    int result;
+
+    logsystool("enter systool_init()\n");
+
+    /*
+     *  Register char systool device
+     */
+    result = register_chrdev(systool_major, systool_NAME, &systool_fops);
+    if (result < 0)
+    {
+        errorsystool("systool: can't get major %d\n",systool_major);
+        return result;
+    }
+
+    if(systool_major == 0) systool_major = result; /* dynamic */
+
+    logsystool("systool device created with %i major number\n",systool_major);
+
+
+    logsystool("Registered %s, at major number = %d.\n\n",systool_NAME, systool_major);
+    logsystool("To use %s, you must create a device file.\n", systool_NAME);
+    logsystool("If this has not already been done, then enter:\n");
+    logsystool("mknod /dev/%s c %d 0\n\n", systool_NAME, systool_major);
+    logsystool("Also set appropriate permissions for /dev/%s.\n\n", systool_NAME);
+
+    return 0;
+}
+
+
+/*
+ *
+ *  systool_cleanup
+ *
+ */
+static void __exit systool_cleanup(void)
+{
+    logsystool("enter systool_cleanup\n");
+    unregister_chrdev(systool_major, systool_NAME);
+}
+
+module_init(systool_init);
+module_exit(systool_cleanup);
diff -Naur kernel.old/drivers/systool/systool_priv.h kernel.new/drivers/systool/systool_priv.h
--- kernel.old/drivers/systool/systool_priv.h	1970-01-01 01:00:00.000000000 +0100
+++ kernel.new/drivers/systool/systool_priv.h	2016-01-26 18:23:10.643836811 +0100
@@ -0,0 +1,47 @@
+/*
+ *  systool_priv.h
+ *
+ *  This file contains the implementation of the system information API
+ *  interface module with the user space.
+ *
+ *  Created by Samir MOUHOUNE on 10/07/2013.
+ *  Copyright 2013 Pace plc. All rights reserved.
+ *
+ *  The copyright in this material is owned by Pace
+ *  plc ("Pace"). This material is regarded as a
+ *  highly confidential trade secret of Pace. It may not be
+ *  reproduced, used, sold or in any other way exploited or
+ *  transferred to any third party without the prior
+ *  written permission of Pace.
+ *
+ */
+
+#ifndef systool_PRIV_H
+#define systool_PRIV_H
+
+
+
+
+#define systool_DEBUG /*To Enable kernel traces*/
+
+#ifdef systool_DEBUG
+#define logsystool(...) \
+        printk("[systool] "__VA_ARGS__);
+#else
+#define logsystool(...)
+#endif
+#define errorsystool(...) \
+        printk("[systool] ERROR "__VA_ARGS__);
+
+
+#define systool_NAME "systool"
+
+
+static ssize_t systool_write(struct file *file, const char *buff, size_t ctr,loff_t *woof);
+static ssize_t systool_read(struct file *file, char *buff, size_t ctr, loff_t *offp);
+static int systool_init (void );
+static void systool_cleanup ( void );
+
+
+
+#endif /* systool_PRIV_H */
diff -Naur kernel.old/include/linux/systool.h kernel.new/include/linux/systool.h
--- kernel.old/include/linux/systool.h	1970-01-01 01:00:00.000000000 +0100
+++ kernel.new/include/linux/systool.h	2016-01-26 18:24:58.057895380 +0100
@@ -0,0 +1,45 @@
+/*
+ *  systool.h
+ *
+ *  This file contains the implementation of the AON read/writer
+ *  interface module with the user space.
+ *
+ *  Created by Samir MOUHOUNE on 25/06/2013.
+ *  Copyright 2013 Pace plc. All rights reserved.
+ *
+ *  The copyright in this material is owned by Pace
+ *  plc ("Pace"). This material is regarded as a
+ *  highly confidential trade secret of Pace. It may not be
+ *  reproduced, used, sold or in any other way exploited or
+ *  transferred to any third party without the prior
+ *  written permission of Pace.
+ *
+ */
+
+#ifndef systool_H
+#define systool_H
+
+#include <linux/ioctl.h>
+
+
+/***********************************************************************************************
+ *
+ *  Ioctl
+ *
+ ***********************************************************************************************/
+#define MAX_IOCTL_CMD_NMBR 8
+#define systool_IOC_MAGIC 'q'
+#define GET_NB_PROC _IOR(systool_IOC_MAGIC, 1, unsigned long)
+#define GET_NB_CPU _IOR(systool_IOC_MAGIC, 2, unsigned long)
+#define GET_MEMORY_STATUS _IOR(systool_IOC_MAGIC, 3, unsigned long)
+#define GET_PROCESS_STATUS _IOR(systool_IOC_MAGIC, 4, unsigned long)
+#define GET_PROCESSOR _IOR(systool_IOC_MAGIC, 5, unsigned long)
+#define CPU_REBOOT_CMD _IOR(systool_IOC_MAGIC, 6, unsigned long)
+#define STANDBY_CM_ENABLE _IOR(systool_IOC_MAGIC, 7, unsigned long)
+#define STANDBY_CM_DISABLE _IOR(systool_IOC_MAGIC, 8, unsigned long)
+#define SYSINFO_MAX_PROCESSOR 4
+/**/
+
+
+
+#endif /* systool_H */
diff -Naur kernel.old/include/uapi/linux/Kbuild kernel.new/include/uapi/linux/Kbuild
--- kernel.old/include/uapi/linux/Kbuild	2016-01-26 18:21:46.434006974 +0100
+++ kernel.new/include/uapi/linux/Kbuild	2016-01-26 18:26:12.053624644 +0100
@@ -370,6 +370,7 @@
 header-y += synclink.h
 header-y += sysctl.h
 header-y += sysinfo.h
+header-y += systool.h
 header-y += taskstats.h
 header-y += tcp.h
 header-y += tcp_metrics.h
