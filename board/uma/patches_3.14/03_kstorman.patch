diff -Naur CURRENT/drivers/Kconfig PATCHED/drivers/Kconfig
--- CURRENT/drivers/Kconfig	2015-08-21 12:25:32.307164000 +0000
+++ PATCHED/drivers/Kconfig	2015-08-21 12:25:32.440165095 +0000
@@ -4,6 +4,8 @@
 
 source "drivers/bus/Kconfig"
 
+source "drivers/kstorman/Kconfig"
+
 source "drivers/connector/Kconfig"
 
 source "drivers/mtd/Kconfig"
diff -Naur CURRENT/drivers/Makefile PATCHED/drivers/Makefile
--- CURRENT/drivers/Makefile	2015-08-21 12:25:32.307164000 +0000
+++ PATCHED/drivers/Makefile	2015-08-21 12:25:32.442165103 +0000
@@ -14,6 +14,7 @@
 obj-y				+= pinctrl/
 obj-y				+= gpio/
 obj-y				+= pwm/
+obj-$(CONFIG_KSTORMAN_DRIVER)	+= kstorman/
 obj-$(CONFIG_PCI)		+= pci/
 obj-$(CONFIG_PARISC)		+= parisc/
 obj-$(CONFIG_RAPIDIO)		+= rapidio/
diff -Naur CURRENT/drivers/kstorman/Kconfig PATCHED/drivers/kstorman/Kconfig
--- CURRENT/drivers/kstorman/Kconfig	1970-01-01 00:00:00.000000000 +0000
+++ PATCHED/drivers/kstorman/Kconfig	2015-08-21 12:25:32.440165095 +0000
@@ -0,0 +1,7 @@
+ config KSTORMAN_DRIVER
+ bool "kstorman driver"
+     depends on BLK_DEV
+     depends on MD
+ help
+ activate the kstorman driver for device infos
+
diff -Naur CURRENT/drivers/kstorman/Makefile PATCHED/drivers/kstorman/Makefile
--- CURRENT/drivers/kstorman/Makefile	1970-01-01 00:00:00.000000000 +0000
+++ PATCHED/drivers/kstorman/Makefile	2015-08-21 12:25:32.441165099 +0000
@@ -0,0 +1 @@
+obj-$(CONFIG_KSTORMAN_DRIVER)		+= kstorman.o kstorman_driver.o
diff -Naur CURRENT/drivers/kstorman/kstorman.c PATCHED/drivers/kstorman/kstorman.c
--- CURRENT/drivers/kstorman/kstorman.c	1970-01-01 00:00:00.000000000 +0000
+++ PATCHED/drivers/kstorman/kstorman.c	2015-08-21 12:25:32.441165099 +0000
@@ -0,0 +1,476 @@
+/*
+ *  kstorman.c
+ *
+ *  This file contains the implementation of the storman 
+ *  core functions.
+ *
+ *  Created by Pace on 19/07/13.
+ *
+ */
+ 
+#include "kstorman_priv.h"
+
+#include <linux/module.h>
+#include <linux/fs.h>
+#include <linux/genhd.h>
+#include <linux/kdev_t.h>
+#include <linux/kernel.h>
+#include <linux/blkdev.h>
+#include <linux/init.h>
+#include <linux/spinlock.h>
+#include <linux/proc_fs.h>
+#include <linux/seq_file.h>
+#include <linux/slab.h>
+#include <linux/kmod.h>
+#include <linux/kobj_map.h>
+#include <linux/mutex.h>
+#include <linux/idr.h>
+#include <linux/log2.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mount.h>
+#include <linux/mnt_namespace.h>
+#include <linux/sched.h>
+#include <linux/nsproxy.h>
+#include <linux/security.h>
+#include <linux/fs_struct.h>
+#include <linux/device-mapper.h>
+#include <linux/libata.h>
+#include <linux/dm-ioctl.h>
+#include <scsi/scsi_device.h>
+#include <scsi/scsi_host.h>
+#include "../../fs/mount.h"
+#include "../usb/storage/usb.h"
+#include "../md/dm.h"
+
+/*#define KSTORMAN_CORE_PRINT_DBG*/
+
+/***********************************************************************************************
+ *
+ *  static functions
+ *
+ ***********************************************************************************************/
+ 
+/*
+ * Copied from fs/namespace.c
+ */
+static struct mount *next_mnt(struct mount *p, struct mount *root)
+{
+    struct list_head *next = p->mnt_mounts.next;
+    if (next == &p->mnt_mounts) {
+        while (1) {
+            if (p == root)
+                return NULL;
+            next = p->mnt_child.next;
+            if (next != &p->mnt_parent->mnt_mounts)
+                break;
+            p = p->mnt_parent;
+        }
+    }
+    return list_entry(next, struct mount, mnt_child);
+}
+
+
+static int set_mount_infos ( kstorman_ioc_getmounts_t *mountlist, struct mount *s )
+{
+    struct path mnt_path = { .dentry = s->mnt.mnt_root, .mnt = &s->mnt };
+    char *pathname;
+    char *tmp;
+    
+    if ((mountlist->mounts_nb + 1) == KSTORMAN_MOUNTLIST_MAXSIZE)
+        return 1;
+    
+    tmp = (char *)__get_free_page(GFP_TEMPORARY);
+
+    if (!tmp) {
+        return -ENOMEM;
+    }
+
+    pathname = d_path(&mnt_path, tmp, PAGE_SIZE);
+
+    if (IS_ERR(pathname)) {
+        free_page((unsigned long)tmp);
+        return PTR_ERR(pathname);
+    }
+
+    /* 
+     * fill mount list
+     */
+    strncpy (mountlist->mounts[mountlist->mounts_nb].device, s->mnt_devname, KSTORMAN_STR_MAXSIZE);
+    strncpy (mountlist->mounts[mountlist->mounts_nb].dir, pathname, KSTORMAN_STR_MAXSIZE);
+    strncpy (mountlist->mounts[mountlist->mounts_nb].type, s->mnt.mnt_sb->s_type->name, KSTORMAN_STR_MAXSIZE);
+    mountlist->mounts[mountlist->mounts_nb].flags = s->mnt.mnt_flags;
+    
+    
+    /* 
+     * Print for debug
+     */
+#ifdef KSTORMAN_CORE_PRINT_DBG
+    printk ("%s on %s", mountlist->mounts[mountlist->mounts_nb].device, mountlist->mounts[mountlist->mounts_nb].dir);
+    
+    printk (" type %s", mountlist->mounts[mountlist->mounts_nb].type);
+    
+    printk (mountlist->mounts[mountlist->mounts_nb].flags & MNT_READONLY ? " (ro" : " (rw");
+    if (mountlist->mounts[mountlist->mounts_nb].flags & MNT_NOSUID) printk (",nosuid");
+    if (mountlist->mounts[mountlist->mounts_nb].flags & MNT_NODEV) printk (",nodev");
+    if (mountlist->mounts[mountlist->mounts_nb].flags & MNT_NOEXEC) printk (",noexec");
+    if (mountlist->mounts[mountlist->mounts_nb].flags & MNT_NOATIME) printk (",noatime");
+    if (mountlist->mounts[mountlist->mounts_nb].flags & MNT_NODIRATIME) printk (",nodiratime");
+    if (mountlist->mounts[mountlist->mounts_nb].flags & MNT_RELATIME) printk (",relatime");
+
+    printk (")\n");
+#endif
+
+    free_page((unsigned long)tmp);
+    
+    mountlist->mounts_nb++;
+    
+    return 0;
+}
+
+
+static struct ata_device *ata_find_dev(struct ata_port *ap, int devno)
+{
+    if (!sata_pmp_attached(ap)) {
+        if (likely(devno < ata_link_max_devices(&ap->link)))
+            return &ap->link.device[devno];
+    } else {
+        if (likely(devno < ap->nr_pmp_links))
+            return &ap->pmp_link[devno].device[0];
+    }
+
+    return NULL;
+}
+
+static struct ata_device *__ata_scsi_find_dev(struct ata_port *ap,
+                          const struct scsi_device *scsidev)
+{
+    int devno;
+
+    /* skip commands not addressed to targets we simulate */
+    if (!sata_pmp_attached(ap)) {
+        if (unlikely(scsidev->channel || scsidev->lun))
+            return NULL;
+        devno = scsidev->id;
+    } else {
+        if (unlikely(scsidev->id || scsidev->lun))
+            return NULL;
+        devno = scsidev->channel;
+    }
+
+    return ata_find_dev(ap, devno);
+}
+
+/**
+ *	ata_scsi_find_dev - lookup ata_device from scsi_cmnd
+ *	@ap: ATA port to which the device is attached
+ *	@scsidev: SCSI device from which we derive the ATA device
+ *
+ *	Given various information provided in struct scsi_cmnd,
+ *	map that onto an ATA bus, and using that mapping
+ *	determine which ata_device is associated with the
+ *	SCSI command to be sent.
+ *
+ *	LOCKING:
+ *	spin_lock_irqsave(host lock)
+ *
+ *	RETURNS:
+ *	Associated ATA device, or %NULL if not found.
+ */
+static struct ata_device *
+ata_scsi_find_dev(struct ata_port *ap, const struct scsi_device *scsidev)
+{
+    struct ata_device *dev = __ata_scsi_find_dev(ap, scsidev);
+
+    if (unlikely(!dev || !ata_dev_enabled(dev)))
+        return NULL;
+
+    return dev;
+}
+
+static int set_block_infos ( kstorman_ioc_getblocks_t *blocklist, struct gendisk *disk )
+{
+    struct mapped_device *mp;
+    struct dm_table *map;
+    struct dm_dev_internal *dd;
+    struct device *device = disk_to_dev (disk);
+    struct device *dev = NULL;
+    struct scsi_device *scsi_dev = NULL;
+    struct Scsi_Host *scsi_host = NULL;
+    struct scsi_target *scsi_targ = NULL;
+    struct ata_port *ap;
+    struct ata_device *atadev;
+    struct us_data *usb_data;
+    struct list_head *devices;
+    int srcu_idx;
+    
+    if ((blocklist->blkdevs_nb + 1) == KSTORMAN_BLKDEVLIST_MAXSIZE)
+        return 1;
+
+    strncpy (blocklist->blkdevs[blocklist->blkdevs_nb].name, disk->disk_name, KSTORMAN_STR_MAXSIZE);
+    blocklist->blkdevs[blocklist->blkdevs_nb].major = disk->major;
+    blocklist->blkdevs[blocklist->blkdevs_nb].minor = disk->first_minor;
+
+    strncpy (blocklist->blkdevs[blocklist->blkdevs_nb].bus, "unknown", KSTORMAN_STR_MAXSIZE);
+    strncpy (blocklist->blkdevs[blocklist->blkdevs_nb].type, "unknown", KSTORMAN_STR_MAXSIZE);
+
+    
+    if ( disk->driverfs_dev != NULL && disk->driverfs_dev->type != NULL
+         && ( !strcmp (disk->driverfs_dev->type->name, "scsi_device")
+            || !strcmp (disk->driverfs_dev->type->name, "mtd")))
+    {
+        if (device)
+        {
+            dev = device;
+
+            while (dev != NULL)
+            {
+                if (dev->type)
+                {
+                    if (!strcmp(dev->type->name, "scsi_device"))
+                    {
+                        scsi_dev = to_scsi_device (dev);
+                        if (scsi_dev)
+                        {
+                            scsi_host = scsi_dev->host;
+                            scsi_targ = scsi_dev->sdev_target;
+
+                            if (!strcmp(scsi_host->hostt->name, "ahci_platform"))
+                            {
+                                ap = ata_shost_to_port(scsi_dev->host);
+                                if (ap)
+                                {
+                                    atadev = ata_scsi_find_dev(ap, scsi_dev);
+                                    if (atadev)
+                                    {
+                                        snprintf (  blocklist->blkdevs[blocklist->blkdevs_nb].bus, KSTORMAN_STR_MAXSIZE, 
+                                                    "ata%u.%02u", atadev->link->ap->print_id, atadev->link->pmp + atadev->devno);
+                                        strncpy (blocklist->blkdevs[blocklist->blkdevs_nb].type, "ata", KSTORMAN_STR_MAXSIZE);
+                                    }
+                                }
+                            }   
+                            else if (!strcmp(scsi_host->hostt->name, "usb-storage"))
+                            {
+                                usb_data = (struct us_data *) scsi_host->hostdata;
+
+                                snprintf (  blocklist->blkdevs[blocklist->blkdevs_nb].bus, KSTORMAN_STR_MAXSIZE, 
+                                            "%s %s", dev_driver_string (&(usb_data->pusb_dev->dev)), 
+                                                     dev_name(&(usb_data->pusb_dev->dev)));
+                                strncpy (blocklist->blkdevs[blocklist->blkdevs_nb].type, "usb", KSTORMAN_STR_MAXSIZE);
+                                
+                            }
+                        }
+                        break;
+                    }
+                    else if (!strcmp(dev->type->name, "mtd"))
+                    {
+                        strncpy (blocklist->blkdevs[blocklist->blkdevs_nb].bus, "mtd", KSTORMAN_STR_MAXSIZE);
+                        strncpy (blocklist->blkdevs[blocklist->blkdevs_nb].type, "mtd", KSTORMAN_STR_MAXSIZE);
+                        break;
+                    }
+                }
+                
+                dev = dev->parent;
+            }
+        }
+    }
+    else
+    {
+        mp = dm_get_md(disk_to_dev(disk)->devt);
+        
+        if (mp)
+        {
+            strncpy (blocklist->blkdevs[blocklist->blkdevs_nb].bus, "dev-mapper", KSTORMAN_STR_MAXSIZE);
+            strncpy (blocklist->blkdevs[blocklist->blkdevs_nb].type, "dev-mapper", KSTORMAN_STR_MAXSIZE);
+
+            map = dm_get_live_table(mp,&srcu_idx);
+            
+            if (map) {
+                struct list_head *tmp, *next;
+                devices = dm_table_get_devices(map);
+
+                list_for_each_safe(tmp, next, devices) {
+                    dd = list_entry(tmp, struct dm_dev_internal, list);
+                    strncpy (blocklist->blkdevs[blocklist->blkdevs_nb].mapped_to, dd->dm_dev.name, KSTORMAN_STR_MAXSIZE);
+                }
+
+                dm_put_live_table(mp, srcu_idx);
+            }
+
+            dm_put (mp);
+        }
+    }
+    
+    
+    /* 
+     * Print for debug
+     */
+#ifdef KSTORMAN_CORE_PRINT_DBG
+    printk ("disk_name=%s\n", blocklist->blkdevs[blocklist->blkdevs_nb].name);
+    printk ("major=%i\n", blocklist->blkdevs[blocklist->blkdevs_nb].major);
+    printk ("first minor=%i\n", blocklist->blkdevs[blocklist->blkdevs_nb].minor);
+    printk ("type=%s\n", blocklist->blkdevs[blocklist->blkdevs_nb].type);
+    printk ("bus=%s\n", blocklist->blkdevs[blocklist->blkdevs_nb].bus);
+#endif
+    
+    blocklist->blkdevs_nb++;
+    
+    return 0;
+}
+
+/***********************************************************************************************
+ *
+ *  core functions
+ *
+ ***********************************************************************************************/
+
+/*
+ * kstorman_core_init
+ */
+int kstorman_core_init ( void )
+{        
+    return 0;
+}
+
+/*
+ * kstorman_core_cleanup
+ */
+void kstorman_core_cleanup ( void )
+{
+    return;
+}
+
+/*
+ * kstorman_core_getmounts
+ */
+int kstorman_core_getmounts ( kstorman_ioc_getmounts_t *mountlist )
+{
+    struct nsproxy *nsproxy;
+    struct mnt_namespace *namespace = NULL;
+    struct mount *r = NULL;
+    int ret = 0;
+        
+    logkstorman("enter %s  [%s:%d]\n", __FUNCTION__, __FILE__, __LINE__);
+    memset (mountlist, 0, sizeof (kstorman_ioc_getmounts_t));
+    mountlist->mounts_nb = 0;
+    
+    rcu_read_lock();
+    nsproxy = task_nsproxy(current);
+    if (nsproxy != NULL) {
+
+        namespace = rcu_dereference(nsproxy->mnt_ns);
+         get_mnt_ns(namespace);
+
+    }
+
+    rcu_read_unlock();
+
+    if (namespace != NULL)
+    {
+        if ((ret = set_mount_infos (mountlist, namespace->root)))
+        {
+            put_mnt_ns(namespace);
+            return ret;
+        }
+
+        list_for_each_entry(r, &namespace->root->mnt_mounts, mnt_child)
+        {
+            struct mount *s;
+
+            for (s = r; s; s = next_mnt(s, r)) {
+                if (s != NULL)
+                {
+                    if ((ret = set_mount_infos (mountlist, s)))
+                    {
+                        put_mnt_ns(namespace);
+                        return ret;
+                    }
+                }
+            }
+        }
+        
+    }
+    else
+        ret = 1;
+
+    put_mnt_ns(namespace);
+    return ret;
+}
+
+/*src/Broadcom/kernel/kernel-current/Documentation/RCU/lockdep.txt
+ * kstorman_core_getblocks
+ */
+int kstorman_core_getblocks ( kstorman_ioc_getblocks_t *blocklist )
+{
+    struct class_dev_iter iter;
+    struct device *dev;
+    int ret = 0;
+    
+    logkstorman("enter %s  [%s:%d]\n", __FUNCTION__, __FILE__, __LINE__);
+    
+    blocklist->blkdevs_nb = 0;
+    
+    class_dev_iter_init(&iter, &block_class, NULL, NULL);
+    while ((dev = class_dev_iter_next(&iter))) {
+        
+        struct gendisk *disk;
+        
+        if (strcmp(dev->type->name, "disk"))
+            continue;
+            
+        disk = dev_to_disk(dev);
+
+        if (get_capacity(disk) == 0 ||
+            (disk->flags & GENHD_FL_SUPPRESS_PARTITION_INFO))
+            continue;
+            
+        if ( (ret = set_block_infos ( blocklist, disk ))) break;
+
+    }
+    class_dev_iter_exit(&iter);
+    
+    return ret;
+}
+
+
+/*
+ * kstorman_core_getmmtd
+ */
+int kstorman_core_getmtd ( kstorman_ioc_getmtd_t *mtdlist )
+{
+    struct mtd_info *mtd_info = NULL;
+    int num;
+    
+    logkstorman("enter %s  [%s:%d]\n", __FUNCTION__, __FILE__, __LINE__);
+    
+    mtdlist->mtd_nb = 0;
+    
+    for(num = 0; num < 64; num++) {
+        if ((mtdlist->mtd_nb + 1) == KSTORMAN_MTDLIST_MAXSIZE)
+            return 1;
+    
+        mtd_info = get_mtd_device(NULL, num);
+        if(IS_ERR(mtd_info)) {
+            continue;
+        }
+        
+        strncpy (mtdlist->mtd[mtdlist->mtd_nb].name, mtd_info->name, KSTORMAN_STR_MAXSIZE);
+        mtdlist->mtd[mtdlist->mtd_nb].index = mtd_info->index;
+        mtdlist->mtd[mtdlist->mtd_nb].type = mtd_info->type;
+
+        /* 
+         * Print for debug
+         */
+#ifdef KSTORMAN_CORE_PRINT_DBG
+        printk("MTD name: %s\n", mtdlist->mtd[mtdlist->mtd_nb].name);
+        printk("MTD index: mtd%i\n", mtdlist->mtd[mtdlist->mtd_nb].index);
+        printk("MTD type: %u\n", mtdlist->mtd[mtdlist->mtd_nb].type);
+#endif
+        
+        mtdlist->mtd_nb++;
+    }
+    
+    logkstorman("exit %s  [%s:%d]\n", __FUNCTION__, __FILE__, __LINE__);
+    
+    return 0;
+}
+
diff -Naur CURRENT/drivers/kstorman/kstorman_driver.c PATCHED/drivers/kstorman/kstorman_driver.c
--- CURRENT/drivers/kstorman/kstorman_driver.c	1970-01-01 00:00:00.000000000 +0000
+++ PATCHED/drivers/kstorman/kstorman_driver.c	2015-08-21 12:25:32.441165099 +0000
@@ -0,0 +1,359 @@
+/*
+ *  kstorman_driver.c
+ *
+ *  This file contains the implementation of the storman 
+ *  interface module with the user space.  
+ *
+ *  Created by Pace on 19/07/13.
+ *
+ */
+
+#include <linux/slab.h>
+#include <linux/module.h>
+#include <linux/fs.h>
+#include <linux/ioctl.h>
+#include <linux/wait.h>
+#include <linux/sched.h>
+#include <linux/poll.h>
+#include <linux/spinlock.h>
+#include <asm/uaccess.h>
+
+#include <linux/kstorman.h>
+
+#include "kstorman_priv.h"
+
+MODULE_AUTHOR ("Pace");
+MODULE_DESCRIPTION ("kstorman interface");
+MODULE_SUPPORTED_DEVICE ("");
+MODULE_LICENSE ("GPL");
+
+
+/*
+ * 
+ *  Module param
+ *
+ */
+static int kstorman_major = 0;
+
+module_param (kstorman_major,  int, 0644);
+MODULE_PARM_DESC (kstorman_major,  "Device major number");
+
+
+/*
+ * 
+ *  Module data
+ *
+ */
+static kstorman_info_t kstorman_info;
+char connected_id[KSTORMAN_MAX_CONNECT];
+
+/***********************************************************************************************
+ *
+ *  ioctl functions
+ *
+ ***********************************************************************************************/
+
+/*
+ * 
+ *  kstorman_getmounts_ioc
+ *
+ */
+int kstorman_getmounts_ioc (kstorman_ioc_getmounts_t *mountlist)
+{
+    int ret;
+
+    logkstorman("enter %s  [%s:%d]\n", __FUNCTION__, __FILE__, __LINE__);
+
+    ret = kstorman_core_getmounts (mountlist);
+
+    return ret;
+}
+
+
+/*
+ * 
+ *  kstorman_getblocks_ioc
+ *
+ */
+int kstorman_getblocks_ioc (kstorman_ioc_getblocks_t *blocklist)
+{
+    int ret;
+
+    logkstorman("enter %s  [%s:%d]\n", __FUNCTION__, __FILE__, __LINE__);
+
+    ret = kstorman_core_getblocks (blocklist);
+
+    return ret;
+}
+
+/*
+ * 
+ *  kstorman_getmtd_ioc
+ *
+ */
+int kstorman_getmtd_ioc (kstorman_ioc_getmtd_t *mtdlist)
+{
+    int ret;
+
+    logkstorman("enter %s  [%s:%d]\n", __FUNCTION__, __FILE__, __LINE__);
+
+    ret = kstorman_core_getmtd(mtdlist);
+
+    return ret;
+}
+
+
+
+
+/***********************************************************************************************
+ *
+ *  Char device functions
+ *
+ ***********************************************************************************************/
+
+/*
+ * 
+ *  kstorman_open
+ *
+ */
+int kstorman_open(struct inode *inode, struct file *filp)
+{
+    int i;
+    
+    kstorman_data_t *priv_data;
+    
+    logkstorman("enter %s  [%s:%d]\n", __FUNCTION__, __FILE__, __LINE__);
+    logkstorman("opened = %i\n", (int) kstorman_info.opened);
+
+    if(!kstorman_info.opened) /* If first open */
+    {
+        logkstorman("opening kstorman\n");
+
+        kstorman_info.opened = 1;
+    }
+
+    if ( kstorman_info.connected < KSTORMAN_MAX_CONNECT )
+    {
+        kstorman_info.connected++;
+        
+        /* Alloc priv_data */
+        priv_data = (kstorman_data_t *) kmalloc(sizeof(kstorman_data_t), GFP_ATOMIC);
+        if ( priv_data == NULL )
+        {
+            logkstorman("kmalloc error\n");
+            return -ENOMEM;
+        }
+        
+        priv_data->infos = &kstorman_info;
+        
+        for (i = 0; i < KSTORMAN_MAX_CONNECT; i++)
+        {
+            if (connected_id[i] == 0)
+            {
+                priv_data->id = i;
+                connected_id[i] = 1;
+                break;
+            }
+        }
+        
+        if (!filp->private_data)
+            filp->private_data = priv_data;
+    }
+    else
+    {
+        logkstorman("kstorman already opened\n");
+        return -EBUSY;
+    }
+
+    logkstorman("exit %s  [%s:%d]\n", __FUNCTION__, __FILE__, __LINE__);
+    return 0;   /* success */
+}
+
+
+/*
+ * 
+ *  kstorman_release
+ *
+ */
+int kstorman_release(struct inode *inode, struct file *filp)
+{
+    kstorman_data_t *priv_data;
+
+    logkstorman("enter %s  [%s:%d]\n", __FUNCTION__, __FILE__, __LINE__);
+    
+    priv_data = (kstorman_data_t *)filp->private_data;
+    
+    connected_id[priv_data->id] = 0;
+
+    if( kstorman_info.connected ) kstorman_info.connected--;
+    
+    kfree (priv_data);
+    
+    if (filp->private_data)
+        filp->private_data = NULL;
+        
+    if (!kstorman_info.connected)
+        kstorman_info.opened = 0;
+
+    logkstorman("exit %s  [%s:%d]\n", __FUNCTION__, __FILE__, __LINE__);
+    return 0;
+}
+
+
+/*
+ * 
+ *  kstorman_ioctl
+ *
+ */
+long kstorman_ioctl (struct file *filp, unsigned int cmd, unsigned long arg)
+{
+    int err = 0;
+
+    kstorman_data_t *priv_data;
+
+    logkstorman("enter %s  [%s:%d]\n", __FUNCTION__, __FILE__, __LINE__);
+    
+    priv_data = (kstorman_data_t *)filp->private_data;
+
+    /*
+     *  Check IOC
+     */
+    if (_IOC_TYPE(cmd) != KSTORMAN_IOC_MAGIC) return -ENOTTY;
+    if (_IOC_NR(cmd) > KSTORMAN_IOC_MAXNR) return -ENOTTY;
+
+    if (_IOC_DIR(cmd) & _IOC_READ)
+        err = !access_ok(VERIFY_WRITE, (void *)arg, _IOC_SIZE(cmd));
+    else if (_IOC_DIR(cmd) & _IOC_WRITE)
+        err = !access_ok(VERIFY_READ, (void *)arg, _IOC_SIZE(cmd));
+    if (err) return -EFAULT;
+
+    switch(cmd)
+    {
+        case KSTORMAN_IOC_GETMOUNTS:
+            err = kstorman_getmounts_ioc (&priv_data->mountlist);
+            
+            if (!err)
+            {
+                copy_to_user( (kstorman_ioc_getmounts_t __user *)arg, &priv_data->mountlist, sizeof(kstorman_ioc_getmounts_t));
+            }
+            break;
+        case KSTORMAN_IOC_GETBLOCKS:
+            err = kstorman_getblocks_ioc (&priv_data->blocklist);
+            
+            if (!err)
+            {
+                copy_to_user( (kstorman_ioc_getblocks_t __user *)arg, &priv_data->blocklist, sizeof(kstorman_ioc_getblocks_t));
+            }
+            break;
+        case KSTORMAN_IOC_GETMTD:
+            err = kstorman_getmtd_ioc (&priv_data->mtdlist);
+            
+            if (!err)
+            {
+                copy_to_user( (kstorman_ioc_getmtd_t __user *)arg, &priv_data->mtdlist, sizeof(kstorman_ioc_getmtd_t));
+            }
+            break;
+        default:
+            return -ENOTTY;
+    }
+    
+    logkstorman("exit %s  [%s:%d]\n", __FUNCTION__, __FILE__, __LINE__);
+    
+    if (err) return -EFAULT;
+
+    return err;
+}
+
+struct file_operations kstorman_fops = {
+    open:  kstorman_open,
+    release: kstorman_release,
+    unlocked_ioctl: kstorman_ioctl,
+    owner: THIS_MODULE,
+};
+
+
+
+
+/***********************************************************************************************
+ *
+ *  init and exit functions
+ *
+ ***********************************************************************************************/
+
+/*
+ * 
+ *  kstorman_init
+ *
+ */
+static int __init kstorman_init(void)
+{
+    int result;
+    int i;
+
+    logkstorman("enter %s  [%s:%d]\n", __FUNCTION__, __FILE__, __LINE__);
+    
+    /*
+     *  Register char kstorman device 
+     */
+    result = register_chrdev(kstorman_major, KSTORMAN_NAME, &kstorman_fops);
+    if (result < 0) 
+    {
+        logkstorman(KERN_WARNING "kstorman: can't get major %d\n",kstorman_major);
+        return result;
+    }
+
+    if (kstorman_major == 0) kstorman_major = result; /* dynamic */
+
+    logkstorman("kstorman device created with %i major number\n", kstorman_major);
+
+    /*
+     *  Init kstorman_info
+     */
+    kstorman_info.opened = 0;
+    kstorman_info.connected = 0;
+    
+    for (i = 0; i < KSTORMAN_MAX_CONNECT; i++)
+        connected_id[i] = 0;
+        
+    /*
+     *  Init kstorman core
+     */
+    if (kstorman_core_init ())
+        return ENOMEM;
+
+    logkstorman("exit %s  [%s:%d]\n", __FUNCTION__, __FILE__, __LINE__);
+
+    return 0;
+}
+
+
+/*
+ * 
+ *  kstorman_cleanup
+ *
+ */
+static void __exit kstorman_cleanup(void)
+{
+    logkstorman("enter %s  [%s:%d]\n", __FUNCTION__, __FILE__, __LINE__);
+    
+    /*
+     *  Init kstorman core
+     */
+     kstorman_core_cleanup ();
+
+    /*
+     *  Uninit kstorman_info
+     */
+
+
+    /*
+     *  Unregister char kstorman device 
+     */
+    unregister_chrdev(kstorman_major, KSTORMAN_NAME);
+
+    logkstorman("exit %s  [%s:%d]\n", __FUNCTION__, __FILE__, __LINE__);
+}
+
+module_init(kstorman_init);
+module_exit(kstorman_cleanup);
+
diff -Naur CURRENT/drivers/kstorman/kstorman_priv.h PATCHED/drivers/kstorman/kstorman_priv.h
--- CURRENT/drivers/kstorman/kstorman_priv.h	1970-01-01 00:00:00.000000000 +0000
+++ PATCHED/drivers/kstorman/kstorman_priv.h	2015-08-21 12:25:32.441165099 +0000
@@ -0,0 +1,51 @@
+/*
+ *  kstorman_priv.h
+ *
+ *  This file contains the implementation of the storman 
+ *  interface module with the user space.  
+ *
+ *  Created by Pace on 19/07/13.
+ *
+ */
+
+#ifndef KSTORMAN_PRIV_H
+#define KSTORMAN_PRIV_H
+
+#include <linux/kstorman.h>
+
+/*#define KSTORMANDEBUG*/
+
+#ifdef KSTORMANDEBUG
+#define logkstorman(...) \
+        printk("[KSTORMAN] "__VA_ARGS__);
+#else
+#define logkstorman(...)
+#endif
+
+#define KSTORMAN_NAME "kstorman"
+
+#define KSTORMAN_MAX_CONNECT 10
+
+typedef struct
+{
+    char opened;
+    char connected;
+} kstorman_info_t;
+
+typedef struct
+{
+    int id;
+    kstorman_ioc_getmounts_t mountlist;
+    kstorman_ioc_getblocks_t blocklist;
+    kstorman_ioc_getmtd_t mtdlist;
+    kstorman_info_t* infos;
+} kstorman_data_t;
+
+int kstorman_core_init ( void );
+void kstorman_core_cleanup ( void );
+int kstorman_core_getmounts ( kstorman_ioc_getmounts_t *mountlist );
+int kstorman_core_getblocks ( kstorman_ioc_getblocks_t *blocklist );
+int kstorman_core_getmtd ( kstorman_ioc_getmtd_t *mtdlist );
+
+
+#endif /* KSTORMAN_PRIV_H */
diff -Naur CURRENT/include/uapi/linux/Kbuild PATCHED/include/uapi/linux/Kbuild
--- CURRENT/include/uapi/linux/Kbuild	2015-08-21 12:25:32.308164000 +0000
+++ PATCHED/include/uapi/linux/Kbuild	2015-08-21 12:25:32.442165103 +0000
@@ -215,6 +215,7 @@
 header-y += kexec.h
 header-y += keyboard.h
 header-y += keyctl.h
+header-y += kstorman.h
 
 ifneq ($(wildcard $(srctree)/arch/$(SRCARCH)/include/uapi/asm/kvm.h \
 		  $(srctree)/arch/$(SRCARCH)/include/asm/kvm.h),)
diff -Naur CURRENT/include/uapi/linux/kstorman.h PATCHED/include/uapi/linux/kstorman.h
--- CURRENT/include/uapi/linux/kstorman.h	1970-01-01 00:00:00.000000000 +0000
+++ PATCHED/include/uapi/linux/kstorman.h	2015-08-21 12:25:32.442165103 +0000
@@ -0,0 +1,94 @@
+/*
+ *  kstorman.h
+ *
+ *  This file contains the implementation of the storman 
+ *  interface module with the user space.  
+ *
+ *  Created by Pace on 19/07/13.
+ *
+ */
+
+#ifndef KSTORMAN_H
+#define KSTORMAN_H
+
+#include <linux/ioctl.h>
+#include <linux/types.h>
+
+/***********************************************************************************************
+ *
+ *  Structures
+ *
+ ***********************************************************************************************/
+#define KSTORMAN_MOUNTLIST_MAXSIZE  100
+#define KSTORMAN_BLKDEVLIST_MAXSIZE 100
+#define KSTORMAN_MTDLIST_MAXSIZE    64
+#define KSTORMAN_STR_MAXSIZE 100
+
+/*
+ *  data for mount list
+ */
+typedef struct
+{
+    char device[KSTORMAN_STR_MAXSIZE + 1];
+    char dir[KSTORMAN_STR_MAXSIZE + 1];
+    char type[KSTORMAN_STR_MAXSIZE + 1];
+    int flags;
+} kstorman_mount_t;
+
+typedef struct
+{
+    size_t mounts_nb;
+    kstorman_mount_t mounts[KSTORMAN_MOUNTLIST_MAXSIZE];
+} kstorman_ioc_getmounts_t;
+
+
+/*
+ *  data for block list
+ */
+typedef struct
+{
+    char name[KSTORMAN_STR_MAXSIZE + 1];
+    int major;
+    int minor;
+    char type[KSTORMAN_STR_MAXSIZE + 1];
+    char bus[KSTORMAN_STR_MAXSIZE + 1];
+    char mapped_to[KSTORMAN_STR_MAXSIZE + 1];
+} kstorman_blkdev_t;
+
+typedef struct
+{
+    size_t blkdevs_nb;
+    kstorman_blkdev_t blkdevs[KSTORMAN_BLKDEVLIST_MAXSIZE];
+} kstorman_ioc_getblocks_t;
+
+/*
+ *  data for mtd list
+ */
+typedef struct
+{
+    char name[KSTORMAN_STR_MAXSIZE + 1];
+    int index;
+    unsigned char type;
+} kstorman_mtd_t;
+
+typedef struct
+{
+    size_t mtd_nb;
+    kstorman_mtd_t mtd[KSTORMAN_MTDLIST_MAXSIZE];
+} kstorman_ioc_getmtd_t;
+
+/***********************************************************************************************
+ *
+ *  Ioctl
+ *
+ ***********************************************************************************************/
+#define KSTORMAN_IOC_MAGIC 'y'
+
+#define KSTORMAN_IOC_GETMOUNTS      _IOR(KSTORMAN_IOC_MAGIC,        0,  kstorman_ioc_getmounts_t*)
+#define KSTORMAN_IOC_GETBLOCKS      _IOR(KSTORMAN_IOC_MAGIC,        1,  kstorman_ioc_getblocks_t*)
+#define KSTORMAN_IOC_GETMTD         _IOR(KSTORMAN_IOC_MAGIC,        2,  kstorman_ioc_getmtd_t*)
+
+#define KSTORMAN_IOC_MAXNR 2
+
+
+#endif /* KSTORMAN_H */
