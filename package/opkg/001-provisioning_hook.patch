--- a/libopkg/opkg_verify.c	2018-06-04 08:49:19.457680188 +0200
+++ b/libopkg/opkg_verify.c	2018-06-13 09:41:11.899234221 +0200
@@ -53,6 +53,25 @@
 }
 #endif
 
+#ifdef HAVE_PROVISION
+#include "opkg_provision.h"
+
+int opkg_verify_and_decrypt_package(const char *file)
+{
+    return (opkg_verify_and_decrypt_package(file));
+}
+#else
+/* Validate and Decrypt the package if possible. */
+int opkg_verify_and_decrypt_package(const char *file)
+{
+    (void)file;
+
+    opkg_msg(ERROR, "Provisioned package checking and decryption not supported\n");
+    return -1;
+}
+#endif
+
+
 int opkg_verify_md5sum(const char *file, const char *md5sum)
 {
     int r;
@@ -104,6 +124,8 @@
         return opkg_verify_gpg_signature(file, sigfile);
     else if (strcmp(opkg_config->signature_type, "openssl") == 0)
         return opkg_verify_openssl_signature(file, sigfile);
+    else if (strcmp(opkg_config->signature_type, "provision") == 0)
+        return opkg_verify_and_decrypt_package(file);
 
     opkg_msg(ERROR, "signature_type option '%s' not understood.\n",
              opkg_config->signature_type);
--- a/configure.ac	2015-12-02 22:56:43.000000000 +0100
+++ b/configure.ac	2018-06-13 11:57:16.237697579 +0200
@@ -10,6 +10,7 @@
 
 AC_CANONICAL_HOST
 AC_GNU_SOURCE
+AC_PROG_CXX
 
 # Disable C++/Fortran checks
 define([AC_LIBTOOL_LANG_CXX_CONFIG], [:])
@@ -74,6 +75,19 @@
 fi
 AM_CONDITIONAL(HAVE_CURL, test "x$want_curl" = "xyes")
 
+# check for provision 
+AC_ARG_ENABLE(provision,
+              AC_HELP_STRING([--enable-provision], [Enable verification and decryption with provision 
+      [[default=no]] ]),
+    [want_provision="$enableval"], [want_provision="no"])
+
+if test "x$want_provision" = "xyes"; then
+  PKG_CHECK_MODULES(PROVISION, [provisionproxy])
+  AC_DEFINE(HAVE_PROVISION, 1, [Define if you want provision support])
+fi
+AM_CONDITIONAL(HAVE_PROVISION, test "x$want_provision" = "xyes")
+
+
 # check for sha256
 AC_ARG_ENABLE(sha256,
               AC_HELP_STRING([--enable-sha256], [Enable sha256sum check
--- a/libopkg/Makefile.am	2018-06-13 11:33:25.196265228 +0200
+++ b/libopkg/Makefile.am	2018-06-13 11:34:26.170288674 +0200
@@ -38,6 +38,11 @@
 opkg_sources += opkg_openssl.c
 opkg_headers += opkg_openssl.h
 endif
+if HAVE_PROVISION
+AM_CXXFLAGS=-std=c++11
+opkg_sources += opkg_provision.cpp
+opkg_headers += opkg_provision.h
+endif
 if HAVE_GPGME
 opkg_sources += opkg_gpg.c
 opkg_headers += opkg_gpg.h
@@ -67,7 +72,7 @@
 endif
 
 libopkg_la_LIBADD = $(LIBARCHIVE_LIBS) \
-		    $(CURL_LIBS) $(GPGME_LIBS) $(GPGERR_LIBS) $(OPENSSL_LIBS) \
+		    $(CURL_LIBS) $(GPGME_LIBS) $(GPGERR_LIBS) $(OPENSSL_LIBS) $(PROVISION_LIBS) \
 		    $(PATHFINDER_LIBS) $(SOLVER_LIBS)
 
 libopkg_la_LDFLAGS = -version-info 1:0:0
--- a/libopkg/opkg_provision.h	2018-06-13 11:38:34.210246513 +0200
+++ b/libopkg/opkg_provision.h	2018-06-13 11:47:56.975994355 +0200
@@ -0,0 +1,29 @@
+/* vi: set expandtab sw=4 sts=4: */
+/* opkg_provision.h - the opkg package management system
+
+    Copyright (C) 2018 Metrological
+
+    This program is free software; you can redistribute it and/or
+    modify it under the terms of the GNU General Public License as
+    published by the Free Software Foundation; either version 2, or (at
+    your option) any later version.
+
+    This program is distributed in the hope that it will be useful, but
+    WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    General Public License for more details.
+*/
+
+#ifndef OPKG_PROVISION_H
+#define OPKG_PROVISION_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+int opkg_verify_and_decrypt_package(const char* file);
+
+#ifdef __cplusplus
+}
+#endif
+#endif
--- a/libopkg/opkg_provision.cpp	2018-06-13 11:38:31.110347034 +0200
+++ b/libopkg/opkg_provision.cpp	2018-06-13 11:45:52.768023211 +0200
@@ -0,0 +1,57 @@
+/* vi: set expandtab sw=4 sts=4: */
+/* opkg_provision.c - the opkg package management system
+
+    Copyright (C) 2018 Metrological
+
+    This program is free software; you can redistribute it and/or
+    modify it under the terms of the GNU General Public License as
+    published by the Free Software Foundation; either version 2, or (at
+    your option) any later version.
+
+    This program is distributed in the hope that it will be useful, but
+    WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    General Public License for more details.
+*/
+
+#include <WPEFramework/core/core.h>
+#include <provision/AccesProvision.h>
+#include <openssl/ssl.h>
+#include <openssl/rsa.h>
+#include <openssl/bio.h>
+#include <openssl/err.h>
+
+int opkg_verify_and_decrypt_package(const char* file) {
+
+    int result = -1;     
+    char RSAKeyBuffer[8*1024];
+    int length = GetDRMId("packager", sizeof(RSAKeyBuffer), RSAKeyBuffer);
+
+    if (length > 0) {
+        // Seems like we have a valid RSA KEY, so we can decrypt.
+        WPEFramework::Core::DataElementFile package (file);
+
+        if (package.IsValid() == true) {
+            uint8_t securityHeader[128];
+
+            BIO* keybio = BIO_new_mem_buf(RSAKeyBuffer, -1);
+
+            if (keybio != nullptr) {
+                RSA* rsa = nullptr;
+	        rsa = PEM_read_bio_RSAPrivateKey(keybio, &rsa, nullptr, nullptr);
+
+	        if (rsa == nullptr) {
+                    result = -2;
+                }
+                else {
+                    // Decrypt the first 128 bytes. This is the security header
+                    result = RSA_private_decrypt(128, package.Buffer(), securityHeader, rsa, RSA_PKCS1_PADDING);
+                    if (result > 0) {
+                    }
+                }
+            }
+        }
+    }
+	   
+    return (-1);
+}
